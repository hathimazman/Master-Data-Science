review_tbl <- tibble(review_id = df$reviewID, text = df$cleaned_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
library(tidyverse)
library(tidytext)
library(textclean)
# Clean text
df$cleaned_review <- replace_contraction(df$full_review) %>%
tolower() %>%
replace_non_ascii() %>%
replace_symbol() %>%
replace_number()%>%
replace_punctuation
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$cleaned_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
library(tidyverse)
library(tidytext)
library(textclean)
# Clean text
df$cleaned_review <- replace_contraction(df$full_review) %>%
tolower() %>%
replace_non_ascii() %>%
replace_symbol() %>%
replace_number()%>%
replace_punctuation()
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$cleaned_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
df$full_review
# Clean text
df$cleaned_review <- replace_contraction(df$full_review) %>%
tolower() %>%
replace_non_ascii() %>%
replace_symbol() %>%
replace_number()%>%
replace_punctuation()
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$cleaned_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
words
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
# Load sentiment lexicon (bing)
bing_sentiments <- get_sentiments("bing")  # includes only "positive" and "negative"
# Join words with sentiment
sentiment_words <- words %>%
inner_join(bing_sentiments, by = "word")
# Count most common positive and negative words
top_sentiment_words <- sentiment_words %>%
count(sentiment, word, sort = TRUE) %>%
group_by(sentiment) %>%
top_n(15, n) %>%
ungroup()
ggplot(top_sentiment_words, aes(x = reorder(word, n), y = n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip() +
labs(title = "Most Common Positive and Negative Words in Reviews",
x = "Word", y = "Frequency")
df <- read.delim("dataset_task3/drugLibTrain_raw.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(df)
df <- df[!duplicated(df$review), ]  # Remove duplicate reviews
# Combine the reviews
df$full_review <- paste(df$benefitsReview, df$sideEffectsReview, df$commentsReview, sep = " ")
effective <- df[df$effectiveness == "Highly Effective", ] %>% select(full_review)
ineffective <- df[df$effectiveness == "Ineffective", ] %>% select(full_review)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$commentsReview)
syuzhet_ineffective <- syuhzet_score(ineffective$commentsReview)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$full_review)
syuzhet_ineffective <- syuhzet_score(ineffective$full_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$full_review)
bing_ineffective <- bing_score(ineffective$full_review)
summary(bing_effective)
summary(bing_ineffective)
afinn_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "afinn")
return(sentiment_vector)
}
afinn_effective <- afinn_score(effective$full_review)
afinn_ineffective <- afinn_score(ineffective$full_review)
summary(afinn_effective)
summary(afinn_ineffective)
nrc_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "nrc")
return(sentiment_vector)
}
nrc_effective <- nrc_score(effective$full_review)
nrc_ineffective <- nrc_score(ineffective$full_review)
summary(nrc_effective)
summary(nrc_ineffective)
emotion_effective <- get_nrc_sentiment(effective$full_review)
emotion_ineffective <- get_nrc_sentiment(ineffective$full_review)
head(emotion_effective, 10)  # Display first 10 rows of effective emotions
quickplot(sentiment, data = td_ineffective, weight=count, geom='bar', fill=sentiment,ylab='count', horiz = T) + ggtitle("Survey Sentiments Ineffective")
quickplot(sentiment, data = td_ineffective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Ineffective")
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
return(td)
}
td_effective <- new_df(emotion_effective)
td_ineffective <- new_df(emotion_ineffective)
quickplot(sentiment, data = td_effective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Effective")
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
td <- td[1:8,]
return(td)
}
td_effective <- new_df(emotion_effective)
td_ineffective <- new_df(emotion_ineffective)
quickplot(sentiment, data = td_effective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Effective")
quickplot(sentiment, data = td_ineffective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Ineffective")
bing_sentiments
td_effective
top_sentiment_words
nrc_effective
syuzhet_vector
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
words
review_tbl
df <- df[!duplicated(df$review), ]  # Remove duplicate reviews
# Combine the reviews
df$full_review <- paste(df$benefitsReview, df$commentsReview, sep = " ")
effective <- df[df$effectiveness == "Highly Effective", ] %>% select(full_review)
ineffective <- df[df$effectiveness == "Ineffective", ] %>% select(full_review)
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$full_review)
syuzhet_ineffective <- syuhzet_score(ineffective$full_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$full_review)
bing_ineffective <- bing_score(ineffective$full_review)
summary(bing_effective)
summary(bing_ineffective)
afinn_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "afinn")
return(sentiment_vector)
}
afinn_effective <- afinn_score(effective$full_review)
afinn_ineffective <- afinn_score(ineffective$full_review)
summary(afinn_effective)
summary(afinn_ineffective)
nrc_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "nrc")
return(sentiment_vector)
}
nrc_effective <- nrc_score(effective$full_review)
nrc_ineffective <- nrc_score(ineffective$full_review)
summary(nrc_effective)
summary(nrc_ineffective)
emotion_effective <- get_nrc_sentiment(effective$full_review)
emotion_ineffective <- get_nrc_sentiment(ineffective$full_review)
head(emotion_effective, 10)  # Display first 10 rows of effective emotions
head(emotion_ineffective, 10)  # Display first 10 rows of ineffective emotions
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
td <- td[1:8,]
return(td)
}
td_effective <- new_df(emotion_effective)
td_ineffective <- new_df(emotion_ineffective)
quickplot(sentiment, data = td_effective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Effective")
quickplot(sentiment, data = td_ineffective, weight=count, geom='bar', fill=sentiment,ylab='count') + ggtitle("Survey Sentiments Ineffective")
td_effective
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
td <- td[1:8,]
return(td)
}
td_effective <- new_df(emotion_effective)
td_effective <- td_effective %>%
mutate(proportion = count / sum(count))  # Calculate proportion for effective
td_ineffective <- new_df(emotion_ineffective)
td_ineffective <- td_ineffective %>%
mutate(proportion = count / sum(count))  # Calculate proportion for ineffective
td_ineffective
quickplot(sentiment, data = td_effective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Effective")
quickplot(sentiment, data = td_ineffective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Ineffective")
# Load sentiment lexicon (bing)
bing_sentiments <- get_sentiments("bing")  # includes only "positive" and "negative"
# Join words with sentiment
sentiment_words <- words %>%
inner_join(bing_sentiments, by = "word")
# Count most common positive and negative words
top_sentiment_words <- sentiment_words %>%
count(sentiment, word, sort = TRUE) %>%
group_by(sentiment) %>%
top_n(15, n) %>%
ungroup()
df <- df[!duplicated(df$review), ]  # Remove duplicate reviews
# Combine the reviews
df$full_review <- paste(df$benefitsReview, df$sideEffects df$commentsReview, sep = " ")
df <- read.delim("dataset_task3/drugLibTrain_raw.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(df)
df <- df[!duplicated(df$review), ]  # Remove duplicate reviews
# Combine the reviews
df$full_review <- paste(df$benefitsReview, df$sideEffects, df$commentsReview, sep = " ")
effective <- df[df$effectiveness == "Highly Effective", ] %>% select(full_review)
ineffective <- df[df$effectiveness == "Ineffective", ] %>% select(full_review)
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$full_review)
syuzhet_ineffective <- syuhzet_score(ineffective$full_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$full_review)
bing_ineffective <- bing_score(ineffective$full_review)
summary(bing_effective)
summary(bing_ineffective)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
library(tidyverse)
library(tidytext)
library(textclean)
df <- read.delim("dataset_task3/drugLibTrain_raw.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(df)
df <- df[!duplicated(df$review), ]  # Remove duplicate reviews
# Combine the reviews
df$full_review <- paste(df$benefitsReview, df$sideEffects, df$commentsReview, sep = " ")
effective <- df[df$effectiveness == "Highly Effective", ] %>% select(full_review)
ineffective <- df[df$effectiveness == "Ineffective", ] %>% select(full_review)
# Convert to tibble
review_tbl <- tibble(review_id = df$reviewID, text = df$full_review)
# Tokenize into words
words <- review_tbl %>%
unnest_tokens(word, text)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$full_review)
syuzhet_ineffective <- syuhzet_score(ineffective$full_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$full_review)
bing_ineffective <- bing_score(ineffective$full_review)
summary(bing_effective)
summary(bing_ineffective)
afinn_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "afinn")
return(sentiment_vector)
}
afinn_effective <- afinn_score(effective$full_review)
afinn_ineffective <- afinn_score(ineffective$full_review)
summary(afinn_effective)
summary(afinn_ineffective)
nrc_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "nrc")
return(sentiment_vector)
}
nrc_effective <- nrc_score(effective$full_review)
nrc_ineffective <- nrc_score(ineffective$full_review)
summary(nrc_effective)
summary(nrc_ineffective)
emotion_effective <- get_nrc_sentiment(effective$full_review)
emotion_ineffective <- get_nrc_sentiment(ineffective$full_review)
head(emotion_effective, 10)  # Display first 10 rows of effective emotions
head(emotion_ineffective, 10)  # Display first 10 rows of ineffective emotions
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
td <- td[1:8,]
return(td)
}
td_effective <- new_df(emotion_effective)
td_effective <- td_effective %>%
mutate(proportion = count / sum(count) * 100)  # Calculate proportion for effective
td_ineffective <- new_df(emotion_ineffective)
td_ineffective <- td_ineffective %>%
mutate(proportion = count / sum(count) * 100)  # Calculate proportion for ineffective
quickplot(sentiment, data = td_effective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Effective")
quickplot(sentiment, data = td_ineffective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Ineffective")
# Load sentiment lexicon (bing)
bing_sentiments <- get_sentiments("bing")  # includes only "positive" and "negative"
# Join words with sentiment
sentiment_words <- words %>%
inner_join(bing_sentiments, by = "word")
# Count most common positive and negative words
top_sentiment_words <- sentiment_words %>%
count(sentiment, word, sort = TRUE) %>%
group_by(sentiment) %>%
top_n(15, n) %>%
ungroup()
ggplot(top_sentiment_words, aes(x = reorder(word, n), y = n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip() +
labs(title = "Most Common Positive and Negative Words in Reviews",
x = "Word", y = "Frequency")
nrc_ineffective
nrc_effective
nrc_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "nrc")
return(sentiment_vector)
}
nrc_effective <- nrc_score(effective$full_review)
nrc_ineffective <- nrc_score(ineffective$full_review)
summary(nrc_effective)
summary(nrc_ineffective)
# Create corpus just for highly effective reviews
corpus_eff <- VCorpus(VectorSource(effective$full_review))
# Clean it
corpus_eff_clean <- corpus_eff %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace)
# Convert back
effective$cleaned_review <- sapply(corpus_eff_clean, as.character)
# Create corpus just for highly effective reviews
corpus_eff <- VCorpus(VectorSource(effective$full_review))
# Clean it
corpus_eff_clean <- corpus_eff %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
# Convert back
effective$cleaned_review <- sapply(corpus_eff_clean, as.character)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$cleaned_review)
syuzhet_ineffective <- syuhzet_score(ineffective$full_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$cleaned_review)
bing_ineffective <- bing_score(ineffective$full_review)
summary(bing_effective)
summary(bing_ineffective)
# Create corpus just for highly effective reviews
corpus_eff <- VCorpus(VectorSource(effective$full_review))
# Clean it
corpus_eff_clean <- corpus_eff %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace)
# Convert back
effective$cleaned_review <- sapply(corpus_eff_clean, as.character)
# Create corpus for ineffective reviews
corpus_ineff <- VCorpus(VectorSource(ineffective$full_review))
# Clean it
corpus_ineff_clean <- corpus_ineff %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace)
# Convert back
ineffective$cleaned_review <- sapply(corpus_ineff_clean, as.character)
syuhzet_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "syuzhet")
return(sentiment_vector)
}
syuzhet_effective <- syuhzet_score(effective$cleaned_review)
syuzhet_ineffective <- syuhzet_score(ineffective$cleaned_review)
summary(syuzhet_effective)
summary(syuzhet_ineffective)
bing_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "bing")
return(sentiment_vector)
}
bing_effective <- bing_score(effective$cleaned_review)
bing_ineffective <- bing_score(ineffective$cleaned_review)
summary(bing_effective)
summary(bing_ineffective)
afinn_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "afinn")
return(sentiment_vector)
}
afinn_effective <- afinn_score(effective$cleaned_review)
afinn_ineffective <- afinn_score(ineffective$cleaned_review)
summary(afinn_effective)
summary(afinn_ineffective)
nrc_score <- function (text) {
sentiment_vector <- get_sentiment(text, method = "nrc")
return(sentiment_vector)
}
nrc_effective <- nrc_score(effective$cleaned_review)
nrc_ineffective <- nrc_score(ineffective$cleaned_review)
summary(nrc_effective)
summary(nrc_ineffective)
emotion_effective <- get_nrc_sentiment(effective$cleaned_review)
emotion_ineffective <- get_nrc_sentiment(ineffective$cleaned_review)
head(emotion_effective, 10)  # Display first 10 rows of effective emotions
new_df <- function(dataframe) {
td <- data.frame(t(dataframe))
td <- data.frame(rowSums(td))
names(td)[1] <- "count"
td <- cbind("sentiment" = rownames(td), td)
rownames(td) <- NULL
td <- td[1:8,]
return(td)
}
td_effective <- new_df(emotion_effective)
td_effective <- td_effective %>%
mutate(proportion = count / sum(count) * 100)  # Calculate proportion for effective
td_ineffective <- new_df(emotion_ineffective)
td_ineffective <- td_ineffective %>%
mutate(proportion = count / sum(count) * 100)  # Calculate proportion for ineffective
quickplot(sentiment, data = td_effective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Effective")
quickplot(sentiment, data = td_ineffective, weight=proportion, geom='bar', fill=sentiment,ylab='percentage (%)') + ggtitle("Survey Sentiments Ineffective")
