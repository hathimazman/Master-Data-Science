# Create a matrix to store correct/incorrect (1/0)
response_matrix <- matrix(0, nrow = nrow(responses_df), ncol = ncol(responses_df))
# Fill the matrix with 1 for correct answers, 0 for incorrect
for (i in 1:ncol(responses_df)) {
response_matrix[, i] <- ifelse(responses_df[, i] == correct_answers[i], 1, 0)
}
# Now calculate difficulty (p-value)
difficulty <- colMeans(response_matrix)
# Calculate total scores
total_scores <- rowSums(response_matrix)
# Sort by total score to identify top and bottom groups
sorted_indices <- order(total_scores, decreasing = TRUE)
group_size <- round(0.27 * nrow(responses_df))
# Make sure we have enough responses for meaningful groups
if (group_size < 1) {
return(data.frame(Message = "Not enough responses to form groups for discrimination analysis."))
}
top_indices <- sorted_indices[1:group_size]
bottom_indices <- sorted_indices[(length(sorted_indices) - group_size + 1):length(sorted_indices)]
# Calculate discrimination
top_difficulty <- colMeans(response_matrix[top_indices, , drop = FALSE])
bottom_difficulty <- colMeans(response_matrix[bottom_indices, , drop = FALSE])
discrimination <- top_difficulty - bottom_difficulty
# Point biserial correlation
pbis_values <- numeric(ncol(responses_df))
for (i in 1:ncol(responses_df)) {
pbis_values[i] <- cor(response_matrix[, i], total_scores, method = "pearson")
}
# Calculate Cohen's Kappa
# This needs to be adjusted as kappa2 expects two raters, not a comparison to a key
cohen_kappa <- numeric(ncol(responses_df))
for (i in 1:ncol(responses_df)) {
# Create a data frame with two columns: correct answers and responses
kappa_data <- data.frame(
key = rep(correct_answers[i], nrow(responses_df)),
response = responses_df[, i]
)
# Calculate kappa
tryCatch({
cohen_kappa[i] <- kappa2(kappa_data)$value
}, error = function(e) {
cohen_kappa[i] <- NA
})
}
# Create result data frame
item_stats <- data.frame(
Question = colnames(df)[-1],
Difficulty = round(difficulty, 2),
Discrimination = round(discrimination, 2),
PointBiserial = round(pbis_values, 2),
CohenKappa = round(cohen_kappa, 2)
)
# Save results to database
tryCatch({
dbWriteTable(con, "analysis_results", item_stats, append = TRUE, row.names = FALSE)
}, error = function(e) {
warning("Could not save to database: ", e$message)
})
item_stats
})
output$item_stats <- renderDT({
req(item_analysis())
datatable(item_analysis(), options = list(scrollX = TRUE))
})
output$difficulty_plot <- renderPlot({
req(item_analysis())
ggplot(item_analysis(), aes(x = Question, y = Difficulty)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Item Difficulty", y = "Difficulty Index (p)")
})
output$discrimination_plot <- renderPlot({
req(item_analysis())
ggplot(item_analysis(), aes(x = Question, y = Discrimination)) +
geom_bar(stat = "identity", fill = "firebrick") +
theme_minimal() +
labs(title = "Item Discrimination", y = "Discrimination Index (D)")
})
output$distractor_plot <- renderPlot({
req(data(), input$select_question)
df <- data()
selected_question <- input$select_question
responses <- df[, selected_question]
response_freq <- table(responses)
ggplot(data.frame(Response = names(response_freq), Count = as.numeric(response_freq)),
aes(x = Response, y = Count)) +
geom_bar(stat = "identity", fill = "orange") +
theme_minimal() +
labs(title = paste("Distractor Analysis for", selected_question), y = "Frequency")
})
}
shinyApp(ui = ui, server = server)
library(tm) # for text mining
library(SnowballC) # for text stemming
library(wordcloud) # word cloud generator
library(RColorBrewer) # color palettes
library(syuzhet) # for sentiment analysis
library(ggplot2) # for plotting graphs
library(tm) # for text mining
library(SnowballC) # for text stemming
library(wordcloud) # word cloud generator
library(RColorBrewer) # color palettes
library(syuzhet) # for sentiment analysis
library(ggplot2) # for plotting graphs
library(tm) # for text mining
library(SnowballC) # for text stemming
library(wordcloud) # word cloud generator
library(RColorBrewer) # color palettes
library(syuzhet) # for sentiment analysis
library(ggplot2) # for plotting graphs
text <- readLines("TeamHealthRawData.txt")
docs <- Corpus(VectorSource(text))
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
text
head(text)
text <- readLines("TeamHealthRawData.txt", encoding = "UTF-8")
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
?readLines
text <- readLines("TeamHealthRawData.txt", encoding = "unknown")
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
text <- read.table("TeamHealthRawData.txt", encoding = "unknown")
head(text)
text <- read.table("TeamHealthRawData.txt")
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
text <- read.table("TeamHealthRawData.txt", encoding ="ÃœTF-8", fill=T, header=F)
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector)
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text, method="afinn")
head(afinn_vector)
summary(afinn_vector)
nrc_vector <- get_sentiment(text, method="nrc")
head(nrc_vector)
summary(nrc_vector)
rbind(
sign(head(syuzhet_vector)),
sign(head(bing_vector)),
sign(head(afinn_vector))
)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
d<-get_nrc_sentiment(text)
text <- VectorSource(text)
d<-get_nrc_sentiment(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
head(text)
text <- Corpus(VectorSource(text))
d<-get_nrc_sentiment(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
head(text)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
text2 <- Corpus(VectorSource(text))
d<-get_nrc_sentiment(text2)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text, method="afinn")
head(afinn_vector)
summary(afinn_vector)
nrc_vector <- get_sentiment(text, method="nrc")
head(nrc_vector)
summary(nrc_vector)
rbind(
sign(head(syuzhet_vector)),
sign(head(bing_vector)),
sign(head(afinn_vector))
)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text <- readLines(text)
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text2<-t(text) #From example 1
text3<-sapply(1:7,function(x) trimws(paste(test2[,x],collapse=" "),"right"))
head(text3)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text2<-t(text) #From example 1
text3<-sapply(1:7,function(x) trimws(paste(text2[,x],collapse=" "),"right"))
head(text3)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
syuzhet_vector <- get_sentiment(text3, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
syuzhet_vector <- get_sentiment(text3, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text3, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text3, method="afinn")
head(afinn_vector)
summary(afinn_vector)
nrc_vector <- get_sentiment(text3, method="nrc")
head(nrc_vector)
summary(nrc_vector)
rbind(
sign(head(syuzhet_vector)),
sign(head(bing_vector)),
sign(head(afinn_vector))
)
d<-get_nrc_sentiment(text3)
head (d,10) # head(d,10) - just to see top 10 lines
d<-get_nrc_sentiment(text3)
head (d,10) # head(d,10) - just to see top 10 lines
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:7,function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text, method="afinn")
head(afinn_vector)
summary(afinn_vector)
nrc_vector <- get_sentiment(text, method="nrc")
head(nrc_vector)
summary(nrc_vector)
rbind(
sign(head(syuzhet_vector)),
sign(head(bing_vector)),
sign(head(afinn_vector))
)
d<-get_nrc_sentiment(text3)
head (d,10) # head(d,10) - just to see top 10 lines
td<-data.frame(t(d)) #transpose
td_new <- data.frame(rowSums(td)) #The function rowSums computes column sums across rows for each level of a grouping variable.
names(td_new)[1] <- "count" #Transformation and cleaning
td_new <- cbind("sentiment" = rownames(td_new), td_new)
rownames(td_new) <- NULL
td_new2<-td_new[1:8,]
quickplot(sentiment, data=td_new2, weight=count, geom="bar",fill=sentiment,ylab="count")+ggtitle("Survey sentiments")
barplot(
sort(colSums(prop.table(d[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
length(text)
dim(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:331,function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:32,function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text, method="afinn")
head(afinn_vector)
summary(afinn_vector)
nrc_vector <- get_sentiment(text, method="nrc")
head(nrc_vector)
summary(nrc_vector)
rbind(
sign(head(syuzhet_vector)),
sign(head(bing_vector)),
sign(head(afinn_vector))
)
d<-get_nrc_sentiment(text3)
head (d,10) # head(d,10) - just to see top 10 lines
td<-data.frame(t(d)) #transpose
td_new <- data.frame(rowSums(td)) #The function rowSums computes column sums across rows for each level of a grouping variable.
names(td_new)[1] <- "count" #Transformation and cleaning
td_new <- cbind("sentiment" = rownames(td_new), td_new)
rownames(td_new) <- NULL
td_new2<-td_new[1:8,]
quickplot(sentiment, data=td_new2, weight=count, geom="bar",fill=sentiment,ylab="count")+ggtitle("Survey sentiments")
barplot(
sort(colSums(prop.table(d[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:32,function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text
table(text)
text
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:32,function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:col(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:row(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text<-sapply(1:nrow(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:nrow(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:ncol(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:nrow(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
syuzhet_vector
bing_vector
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
quickplot(sentiment, data=td_new2, weight=count, geom="bar",fill=sentiment,ylab="count")+ggtitle("Survey sentiments")
barplot(
sort(colSums(prop.table(d[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
text <- read.table("TeamHealthRawData.txt", fill=T, header=F)
text<-t(text) #From example 1
text<-sapply(1:nrow(text),function(x) trimws(paste(text[,x],collapse=" "),"right"))
head(text)
syuzhet_vector <- get_sentiment(text, method="syuzhet")
head(syuzhet_vector,10) # see the first 10 elements of the vector
summary(syuzhet_vector)
bing_vector <- get_sentiment(text, method="bing")
head(bing_vector)
summary(bing_vector)
afinn_vector <- get_sentiment(text, method="afinn")
head(afinn_vector)
summary(afinn_vector)
d<-get_nrc_sentiment(text)
head(d,10) # head(d,10) - just to see top 10 lines
d<-get_nrc_sentiment(text)
head(d,10) # head(d,10) - just to see top 10 lines
td<-data.frame(t(d)) #transpose
td_new <- data.frame(rowSums(td)) #The function rowSums computes column sums across rows for each level of a grouping variable.
names(td_new)[1] <- "count" #Transformation and cleaning
td_new <- cbind("sentiment" = rownames(td_new), td_new)
rownames(td_new) <- NULL
td_new2<-td_new[1:8,]
quickplot(sentiment, data=td_new2, weight=count, geom="bar",fill=sentiment,ylab="count")+ggtitle("Survey sentiments")
barplot(
sort(colSums(prop.table(d[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
td_new
td<-data.frame(t(d)) #transpose
td
td_new <- data.frame(rowSums(td)) #The function rowSums computes column sums across rows for each level of a grouping variable.
td_new
names(td_new)[1] <- "count" #Transformation and cleaning
td_new
td_new <- cbind("sentiment" = rownames(td_new), td_new)
td_new
rownames(td_new) <- NULL
td_new
barplot(
sort(colSums(prop.table(td_new))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(d[, 1:8]))),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Text", xlab="Percentage"
)
install.packages('imager')
setwd("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis")
getwd()
library(imager)
library(imager)
file <- system.file('images/parrot.jpeg', package = 'imager')
parrots <- load.image(file)
library(imager)
file <- system.file('images/parrot.jpeg', package = 'imager')
parrots <- load.image(file)
library(imager)
file <- system.file('/images/parrot.jpeg', package = 'imager')
parrots <- load.image(file)
file <- system.file('./images/parrot.jpeg', package = 'imager')
parrots <- load.image(file)
plot(parrots)
library(imager)
file <- system.file("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis/images/parrot.jpeg", package = 'imager')
parrots <- load.image(file)
library(imager)
file <- system.file("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis/images/parrot.jpeg", package = 'imager')
parrots <- load.image(file)
library(imager)
file <- system.file("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis/images/parrot.png", package = 'imager')
parrots <- load.image(file)
library(imager)
file <- system.file("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis/images/parrot.png", package = 'imager')
parrots <- load.image(file)
getwd()
library(imager)
file <- system.file("D:/Github Repo/Master-Data-Science/Semester_2/Unstructured Data/Image Data Analysis/images/parrot.png", package = 'imager')
parrots <- load.image(file)
rose <- load.image('images/rose.jpg')
rose <- load.image('images/rose.jpeg')
plot(rose)
parrots <- load.image('images/parrot.png')
plot(parrots)
parrots.blurry <- isoblur(parrots, 10)
plot(parrots.blurry)
parrots.xedges <- deriche(parrots, 2, order=2, axis = 'x') # edge detector along x axis
parrots.yedges <- deriche(parrots, 2, order=2, axis = 'y') # edge detector along y axis
gray.parrots <- grayscale(parrots) # convert to grayscale
plot(parrots.xedges)
parrots.xedges <- deriche(parrots, 2, order=2, axis = 'x') # edge detector along x axis
parrots.yedges <- deriche(parrots, 2, order=2, axis = 'y') # edge detector along y axis
gray.parrots <- grayscale(parrots) # convert to grayscale
plot(parrots.yedges)
birds <- parrots
birds.noisy <- (birds + 0.5*rnorm(prod(dim(birds))))
layout(t(1:2))
plot(birds.noisy, main = "Noisy")
isoblur(birds.noisy,5) %>% plot(main = "Blurred")
thmb <- resize(parrots, round(width(parrots)/10), round(height(parrots)/10)))
plot(thmb, main="Thumbnail")
thmb <- resize(parrots, round(width(parrots)/10), round(height(parrots)/10))
plot(thmb, main="Thumbnail")
thmb2 <- resize(parrots,100,100)
plot(thmb2)
thmb <- resize(parrots, round(width(parrots)/10), round(height(parrots)/10))
plot(thmb, main="Thumbnail")
thmb2 <- resize(parrots,100,100)
plot(thmb2)
thmb2 <- resize(parrots,100,100)
plot(thmb2)
save.image(thmb2, "images/small_rose.png")
