normal <- mono(normal, "left")
}
if (mr@stereo == TRUE) {
mr <- mono(mr, "left")
}
filtered <- bwfilter(normal@left,
f = normal@samp.rate,
n = 4,              # Filter order
from = 20,
to = 500,
bandpass = TRUE,
listen = FALSE,
output = "sample")
normal@left <- filtered
plot(normal@left)
plot.frequency.spectrum <- function(X.k, xlimits = c(0,length(X.k))) {
plot.data <- cbind(0:(length(X.k)-1),Mod(X.k))
# Why is scaling necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t='h', lwd=2, main = '',
xlab = 'Frequency (Hz)', ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
normal_fft <- fft(normal@left)
plot.frequency.spectrum(normal_fft, xlimits = c(0, 5000))
mr_fft <- fft(mr@left)
plot.frequency.spectrum(mr_fft, xlimits = c(0, 5000))
plot.frequency.spectrum(normal_fft, xlimits = c(0, 5000))
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
plot.frequency.spectrum(mr_fft, xlimits = c(0, 4000))
library(rpanel)
spectro(normal@left)
dynspec(z, wl=1024, osc=T)
spectro(normal@left, f=normal@samp.rate)
spectro(normal@left, f=mr@samp.rate)
spectro(mr@left, f=mr@samp.rate)
palette=gray.colors(100)
library(rpanel)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 4000),
col=gray.colors(100),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1),
palette=gray.colors(100)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 4000),
col=gray.colors(100),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1),
palette=gray.colors(100)
)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 4000),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1),
palette=gray.colors(100)
)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 4000),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1)
)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 20),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1)
)
spectro(mr@left, f=mr@samp.rate,
flim=c(0, 1),
main="Spectrogram of Mitral Regurgitation",
scale=c(0, 1)
)
spectro(mr@left, f=mr@samp.rate)
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 512,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 512,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 512,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 1024,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
normal <- readWave("dataset/normal.wav")
mr <- readWave("dataset/MR.wav")
if (normal@stereo == TRUE) {
normal <- mono(normal, "left")
}
if (mr@stereo == TRUE) {
mr <- mono(mr, "left")
}
plot.frequency.spectrum <- function(X.k, xlimits = c(0,length(X.k))) {
plot.data <- cbind(0:(length(X.k)-1),Mod(X.k))
# Why is scaling necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t='h', lwd=2, main = '',
xlab = 'Frequency (Hz)', ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
normal_fft <- fft(normal@left)
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
mr_fft <- fft(mr@left)
plot.frequency.spectrum(mr_fft, xlimits = c(0, 4000))
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
library(rpanel)
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
trimmed_mr <- cutw(mr, f = f, from = 0, to = 3, output = "Wave")
trimmed_mr <- cutw(mr, f = mr@samp.rate, from = 0, to = 3, output = "Wave")
trimmed_normal <- cutw(normal, f = normal@samp.rate, from = 0, to = 3, output = "Wave")
normal <- trimmed_normal
mr <- trimmed_mr
par(mfrow = c(2,1))
plot(normal@left, main = "Normal Heart Sound", col = "blue", xlab = "time")
plot(mr, main = "Mitral Regurgitation", col = "red", xlab = "time")
normal <- readWave("dataset/normal.wav")
mr <- readWave("dataset/MR.wav")
# Get sample rate and bit
normal_f <- normal@samp.rate
mr_f <- mr@samp.rate
normal_bit <- normal@bit
mr_bit <- mr@bit
if (normal@stereo == TRUE) {
normal <- mono(normal, "left")
}
if (mr@stereo == TRUE) {
mr <- mono(mr, "left")
}
normal <- Wave(trimmed_normal@left, samp.rate = normal_f, bit = normal_bit)
normal
mr <- Wave(trimmed_mr@left, samp.rate = mr_f, bit = mr_bit)
par(mfrow = c(2,1))
plot(normal@left, main = "Normal Heart Sound", col = "blue")
plot(mr, main = "Mitral Regurgitation", col = "red")
par(mfrow = c(2,1))
plot(normal, main = "Normal Heart Sound", col = "blue")
plot(mr, main = "Mitral Regurgitation", col = "red")
# Why is scaling necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot.frequency.spectrum <- function(X.k, xlimits = c(0,length(X.k))) {
plot.data <- cbind(0:(length(X.k)-1),Mod(X.k))
# Why is scaling necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t='h', lwd=2, main = '',
xlab = 'Frequency (Hz)', ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
normal_fft <- fft(normal)
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
plot.frequency.spectrum(normal, xlimits = c(0, 3000))
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
normal_fft <- fft(normal@left)
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
timer(normal, f = normal_f, threshold =5)
timer(normal, f = normal_f, threshold =6)
timer(normal, f = normal_f, threshold =6, msmooth = c(100,0))
timer(normal, f = normal_f, threshold =7, msmooth = c(100,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(100,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(150,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(200,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(50,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(300,0))
timer(normal, f = normal_f, threshold =7, msmooth = c(300,0))
timer(normal, f = normal_f, threshold =6, msmooth = c(300,0))
timer(normal, f = normal_f, threshold =7, msmooth = c(300,0))
timer(normal, f = normal_f, threshold =7, msmooth = c(350,0))
timer(normal, f = normal_f, threshold =7, msmooth = c(325,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(325,0))
timer(normal, f = normal_f, threshold =8, msmooth = c(325,0))
timer(mr, f = mr_f, threshold =8, msmooth = c(325,0))
timer(mr, f = mr_f, threshold =9, msmooth = c(325,0))
timer(mr, f = mr_f, threshold =10, msmooth = c(325,0))
timer(mr, f = mr_f, threshold =15, msmooth = c(325,0))
timer(normal, f = normal_f, threshold =15, msmooth = c(325,0))
timer(mr, f = mr_f, threshold =15, msmooth = c(400,0))
timer(normal, f = normal_f, threshold =15, msmooth = c(400,0))
plot.frequency.spectrum <- function(X.k, xlimits = c(0,length(X.k))) {
plot.data <- cbind(0:(length(X.k)-1),Mod(X.k))
# Why is scaling necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t='h', lwd=2, main = '',
xlab = 'Frequency (Hz)', ylab = "Strength",
xlim = xlimits, ylim = c(0,max(Mod(plot.data[,2]))))
}
normal_fft <- fft(normal@left)
plot.frequency.spectrum(normal_fft, xlimits = c(0, 3000))
mr_fft <- fft(mr@left)
plot.frequency.spectrum(mr_fft, xlimits = c(0, 4000))
plot.frequency.spectrum(mr_fft, xlimits = c(0, 3000))
plot.frequency.spectrum(normal_fft, xlimits = c(0, 1500))
mr_fft <- fft(mr@left)
plot.frequency.spectrum(mr_fft, xlimits = c(0, 1500))
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
library(rpanel)
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),       # frequency limit in kHz
wl = 256,               # window length; can try 256 or 1024
ovlp = 75,              # % overlap
palette = spectro.colors,  # default color scale
main = "Spectrogram of MR Heart Sound (0–500 Hz)")
# Spectrogram for Normal
spectro(normal_trim@left,
f = normal_trim@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- same time axis
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
# Set plotting area to 2 rows, 1 column
par(mfrow = c(2, 1))
# Spectrogram for MR
spectro(mr_trim@left,
f = mr_trim@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- fix time axis range
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Mitral Regurgitation (0–500 Hz)")
# Set plotting area to 2 rows, 1 column
par(mfrow = c(2, 1))
# Spectrogram for MR
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- fix time axis range
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Mitral Regurgitation (0–500 Hz)")
# Spectrogram for Normal
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- same time axis
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
# Set plotting area to 2 rows, 1 column
par(mfrow = c(2, 1))
# Spectrogram for MR
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- fix time axis range
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Mitral Regurgitation (0–500 Hz)")
# Spectrogram for Normal
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- same time axis
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
par(mfrow = c(2, 1))
# Spectrogram for MR
spectro(mr@left,
f = mr@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- fix time axis range
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Mitral Regurgitation (0–500 Hz)")
# Spectrogram for Normal
spectro(normal@left,
f = normal@samp.rate,
flim = c(0, 0.5),
tlim = c(0, 3),                # <-- same time axis
wl = 256,
ovlp = 75,
palette = spectro.colors,
main = "Spectrogram of Normal Heart Sound (0–500 Hz)")
dynspec(normal)
dynspec(normal, wl=1024, osc=T)
dynspec(normal@left, wl=1024, osc=T)
dynspec(normal@left, f=normal@samp.rate ,wl=1024, osc=T)
dynspec(mr@left, f=mr@samp.rate ,wl=1024, osc=T)
library(tidyverse)
library(igraph)
parse_peer_evaluation <- function(filepath, mapping_file,
rater_id_col = "Matrix Number",
rank_prefix = "Rank your top 3") {
# Load evaluation and mapping data
df <- read.csv(filepath, check.names = FALSE)
mapping_df <- read.csv(mapping_file, check.names = FALSE)
colnames(mapping_df) <- c("ratee_matrix", "ratee_id")  # rename for merge clarity
# Ensure rater_id is present
df <- df %>% mutate(rater_id = as.character(df[[rater_id_col]]))
# Extract Likert columns
likert_cols <- grep("\\[.*\\]", names(df), value = TRUE)
ratee_names <- str_extract(likert_cols, "(?<=\\[).+?(?=\\])")
names(df)[match(likert_cols, names(df))] <- ratee_names
# Likert to long format
likert_long <- df %>%
select(rater_id, all_of(ratee_names)) %>%
pivot_longer(cols = -rater_id, names_to = "ratee_id", values_to = "score") %>%
mutate(score = as.numeric(str_extract(score, "^\\d+"))) %>%
group_by(rater_id, ratee_id) %>%
summarise(C_ij = sum(score, na.rm = TRUE), .groups = "drop")
# Top 3 ranking
rank_cols <- names(df)[grepl(rank_prefix, names(df))]
rank_weights <- rev(seq_along(rank_cols))  # 3, 2, 1
rank_long <- map2_dfr(rank_cols, rank_weights, function(col, pts) {
df %>%
select(rater_id, all_of(col)) %>%
rename(ratee_id = !!col) %>%
mutate(R_ij = pts)
})
# Merge both scores
final_df <- likert_long %>%
left_join(rank_long, by = c("rater_id", "ratee_id")) %>%
mutate(R_ij = replace_na(R_ij, 0)) %>%
left_join(mapping_df, by = "ratee_id") %>%
mutate(ratee_id = coalesce(ratee_matrix, ratee_id)) %>%
select(rater_id, ratee_id, C_ij, R_ij) %>%
arrange(rater_id, desc(R_ij))
# Remove self-ratings
final_df <- final_df %>%
filter(rater_id != ratee_id)
# Create weighted score (0 if not ranked)
final_df <- final_df %>%
mutate(weighted_score = if_else(R_ij == 0, 0, 0.7 * C_ij + 0.3 * R_ij))
return(final_df)
}
plot_peer_network <- function(eval_path, mapping_path,
rater_id_col = "Matrix Number",
rank_prefix = "Rank your top 3",
edge_weight_label = TRUE,
plot_title = "Peer Evaluation Network (Ranked Only)") {
library(igraph)
library(tidyverse)
library(RColorBrewer)
# Step 1: Parse and calculate weighted score
df <- parse_peer_evaluation(
filepath = eval_path,
mapping_file = mapping_path,
rater_id_col = rater_id_col,
rank_prefix = rank_prefix
)
# Step 2: Create full node list
all_nodes <- unique(c(df$rater_id, df$ratee_id))
vertices_df <- data.frame(name = all_nodes)
# Step 3: Keep only edges with nonzero weights
edges_df <- df %>% filter(weighted_score > 0)
# Step 4: Create igraph object
g <- graph_from_data_frame(edges_df, directed = TRUE, vertices = vertices_df)
E(g)$weight <- edges_df$weighted_score
# Step 5: Compute modularity class
g_undirected <- as.undirected(g, mode = "collapse", edge.attr.comb = "mean")
community <- cluster_louvain(g_undirected)
modularity_class <- membership(community)
# Step 6: Assign colors by modularity class
num_classes <- length(unique(modularity_class))
colors <- brewer.pal(max(3, min(num_classes, 12)), "Set3")
V(g)$color <- colors[modularity_class[V(g)$name]]
# Step 7: Plot with colored nodes
plot(
g,
edge.arrow.size = 0.4,
edge.width = E(g)$weight,
vertex.label.cex = 0.7,
vertex.size = 25,
edge.label = if (edge_weight_label) E(g)$weight else NA,
main = plot_title
)
# Optional: Legend for modularity groups
legend("topright",
legend = paste("Group", sort(unique(modularity_class))),
col = colors[sort(unique(modularity_class))],
pch = 19, pt.cex = 2, bty = "n")
return(g)
}
calculate_peer_metrics <- function(eval_path, mapping_path,
rater_id_col = "Matrix Number",
rank_prefix = "Rank your top 3") {
# Step 1: Parse and clean data
df <- parse_peer_evaluation(
filepath = eval_path,
mapping_file = mapping_path,
rater_id_col = rater_id_col,
rank_prefix = rank_prefix
)
# Step 2: Node and edge preparation
all_nodes <- unique(c(df$rater_id, df$ratee_id))
vertices_df <- data.frame(name = all_nodes)
edges_df <- df %>% filter(weighted_score > 0)
# Step 3: Create graph with all nodes
g <- graph_from_data_frame(edges_df, directed = TRUE, vertices = vertices_df)
E(g)$weight <- edges_df$weighted_score
# Step 4: Centrality measures
metrics <- tibble(
student_id = V(g)$name,
in_degree = degree(g, mode = "in"),
out_degree = degree(g, mode = "out"),
betweenness = betweenness(g, directed = TRUE),
closeness = closeness(g, mode = "all"),
pagerank = page_rank(g)$vector
)
# Step 5: Modularity using Louvain (on undirected version)
g_undirected <- as.undirected(g, mode = "collapse", edge.attr.comb = "mean")
community <- cluster_louvain(g_undirected)
metrics$modularity_class <- membership(community)[metrics$student_id]
return(metrics)
}
mapping_path <- "dataset/y1/y1_mapping.csv"
y1_pbl1_path <- "dataset/y1/pbl1.csv"
y1_pbl2_path <- "dataset/y1/pbl2.csv"
y1_pbl3_path <- "dataset/y1/pbl3.csv"
y1_pbl4_path <- "dataset/y1/pbl4.csv"
y1_pbl5_path <- "dataset/y1/pbl5.csv"
y1_pbl6_path <- "dataset/y1/pbl6.csv"
y1_pbl7_path <- "dataset/y1/pbl7.csv"
y1_pbl8_path <- "dataset/y1/pbl8.csv"
y1_pbl9_path <- "dataset/y1/pbl9.csv"
y1_pbl10_path <- "dataset/y1/pbl10.csv"
y1_pbl11_path <- "dataset/y1/pbl11.csv"
y1_pbl12_path <- "dataset/y1/pbl12.csv"
y1_pbl13_path <- "dataset/y1/pbl13.csv"
y1_pbl14_path <- "dataset/y1/pbl14.csv"
y1_pbl15_path <- "dataset/y1/pbl15.csv"
y1_pbl16_path <- "dataset/y1/pbl16.csv"
y1_pbl17_path <- "dataset/y1/pbl17.csv"
y1_pbl18_path <- "dataset/y1/pbl18.csv"
y1_pbl19_path <- "dataset/y1/pbl19.csv"
y1_pbl20_path <- "dataset/y1/pbl20.csv"
y1_pbl1_df <- parse_peer_evaluation(y1_pbl1_path, mapping_path)
y1_pbl4_df <- parse_peer_evaluation(y1_pbl4_path, mapping_path)
y1_pbl7_df <- parse_peer_evaluation(y1_pbl7_path, mapping_path)
y1_pbl10_df <- parse_peer_evaluation(y1_pbl10_path, mapping_path)
plot_peer_network(
eval_path = y1_pbl4_path,
mapping_path = mapping_path,
plot_title = "Peer Evaluation Network for PBL 4"
)
plot_peer_network(
eval_path = y1_pbl4_path,
mapping_path = mapping_path,
plot_title = "Peer Evaluation Network for PBL 4"
)
plot_peer_network(
eval_path = y1_pbl4_path,
mapping_path = mapping_path,
plot_title = "Peer Evaluation Network for PBL 4"
)
plot_peer_network(
eval_path = y1_pbl7_path,
mapping_path = mapping_path,
plot_title = "Peer Evaluation Network for PBL 7"
)
plot_peer_network(
eval_path = y1_pbl4_path,
mapping_path = mapping_path,
plot_title = "Peer Evaluation Network for PBL 4"
)
y1_pbl4_df
